{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {
		"Description": [
			"This template creates a VPC with dedicated tenancy for use with the ec2 Container Service, a Private ",
			"Subnet, and a Public Subnet.  It creates the corresponding Route Tables, InternetGateway, and ",
			"Managed NAT Gateway.  It also adds the appropriate routes.  Then, it creates an ECS Security Group for ",
			"Container Instances in the VPC.  Finally, it creates a Linux Bastion Host that can also be used to ",
			"manage Docker images.",
			"Assumptions",
			"1.  That the ECS roles (ecsInstanceRole and ecsServiceRole exist)",
			"Questions/Issues",
			"1.  Consider a Mapping for the Bastion Host AMI.",
			"2.  Consider creating multiple private subnets."
		]
	},
	"Parameters": {
		"bastionHostKeyPair": {
			"Description": "Amazon EC2 Key Pair to be used for the Bastion Host/Docker Admin",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "other-demo"
		},
		"bastionHostImageId": {
			"Description": "AMI to be used for the Bastion Host (use an ECS-optimized AMI like ami-84b44de4 to use this to manage Docker images)",
			"Type": "AWS::EC2::Image::Id"
		}
	},
	"Mappings": {
		"SubnetConfig": {
			"VPC": {
				"CIDR": "10.101.0.0/16"
			},
			"Public": {
				"CIDR": "10.101.1.0/24"
			},
			"Private": {
				"CIDR": "10.101.64.0/18"
			}
		}
	},
	"Resources": {
		"dedicatedVPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "ecs-demo-vpc"
				}],
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "VPC", "CIDR"]
				},
				"InstanceTenancy": "dedicated"
			}
		},
		"pubSubnet": {
			"DependsOn": ["dedicatedVPC"],
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"MapPublicIpOnLaunch": false,
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Public", "CIDR"]
				}
			}
		},
		"privSubnet": {
			"DependsOn": ["dedicatedVPC", "pubSubnet"],
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"AvailabilityZone": {
					"Fn::GetAtt": ["pubSubnet", "AvailabilityZone"]
				},
				"MapPublicIpOnLaunch": false,
				"CidrBlock": {
					"Fn::FindInMap": ["SubnetConfig", "Private", "CIDR"]
				}
			}
		},
		"privRouteTable": {
			"DependsOn": ["dedicatedVPC"],
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "dedicatedVPC"
				}
			}
		},
		"privSubnetRouteTableAssociation": {
			"DependsOn": ["privSubnet", "privRouteTable"],
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "privSubnet"
				},
				"RouteTableId": {
					"Ref": "privRouteTable"
				}
			}
		},
		"igw": {
			"DependsOn": ["pubSubnet"],
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {}
		},
		"pubRouteTable": {
			"DependsOn": ["dedicatedVPC"],
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "dedicatedVPC"
				}
			}
		},
		"attachIGW": {
			"DependsOn": ["dedicatedVPC", "igw", "pubRouteTable"],
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"InternetGatewayId": {
					"Ref": "igw"
				}
			}
		},
		"pubRoute": {
			"DependsOn": ["pubRouteTable", "attachIGW"],
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "pubRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "igw"
				}
			}
		},
		"pubSubnetRouteTableAssociation": {
			"DependsOn": ["pubSubnet", "pubRouteTable"],
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "pubSubnet"
				},
				"RouteTableId": {
					"Ref": "pubRouteTable"
				}
			}
		},
		"managedNGWIP": {
			"DependsOn": ["privSubnet", "attachIGW", "privSubnetRouteTableAssociation"],
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"managedNGW": {
			"DependsOn": ["managedNGWIP", "privSubnetRouteTableAssociation", "pubSubnetRouteTableAssociation"],
			"Type": "AWS::EC2::NatGateway",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": ["managedNGWIP", "AllocationId"]
				},
				"SubnetId": {
					"Ref": "pubSubnet"
				}
			}
		},
		"ngwRoute": {
			"DependsOn": ["privRouteTable", "managedNGW"],
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "privRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NatGatewayId": {
					"Ref": "managedNGW"
				}
			}
		},
		"bastionHostSG": {
			"DependsOn": "dedicatedVPC",
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Bastion Host SG - allow SSH in and all out",
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "-1",
					"FromPort": "0",
					"ToPort": "0",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"bastionHostAccessSG": {
			"DependsOn": ["dedicatedVPC", "bastionHostSG"],
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "SG that permits SSH traffic from the Bastion Host",
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"SourceSecurityGroupId": {
						"Ref": "bastionHostSG"
					}
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"bastionHost": {
			"DependsOn": ["attachIGW", "ngwRoute"],
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Ref": "bastionHostImageId"
				},
				"KeyName": {
					"Ref": "bastionHostKeyPair"
				},
				"InstanceType": "c4.large",
				"EbsOptimized": true,
				"NetworkInterfaces": [{
					"DeviceIndex": "0",
					"AssociatePublicIpAddress": true,
					"GroupSet": [{
						"Fn::GetAtt": ["bastionHostSG", "GroupId"]
					}],
					"SubnetId": {
						"Ref": "pubSubnet"
					}
				}]
			}
		},
		"ecsContainerInstanceSG": {
			"DependsOn": ["dedicatedVPC", "bastionHostAccessSG"],
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "ecs-container-instance-sg"
				}],
				"GroupDescription": "SG for ECS container instances (also permits SSH access from the bastion host)",
				"VpcId": {
					"Ref": "dedicatedVPC"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"SourceSecurityGroupId": {
						"Ref": "bastionHostSG"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		}
	},
	"Outputs": {
		"dedicatedVPC": {
			"Description": "ID for new dedicated VPC",
			"Value": {
				"Ref": "dedicatedVPC"
			}
		},
		"dedicatedVPCCIDR": {
			"Description": "CIDR Block for new dedicated VPC",
			"Value": {
				"Fn::GetAtt": ["dedicatedVPC", "CidrBlock"]
			}
		},
		"publicSubnet": {
			"Description": "ID for new public subnet",
			"Value": {
				"Ref": "pubSubnet"
			}
		},
		"privateSubnet": {
			"Description": "ID for new private subnet",
			"Value": {
				"Ref": "privSubnet"
			}
		},
		"natGateway": {
			"Description": "ID for new Managed NAT Gateway",
			"Value": {
				"Ref": "managedNGW"
			}
		},
		"natGatewayIP": {
			"Description": "Public IP assigned to new Managed NAT Gateway",
			"Value": {
				"Ref": "managedNGWIP"
			}
		},
		"bastionHostPubIP": {
			"Description": "Public IP address assigned to new Bastion Host/Docker Admin instance",
			"Value": {
				"Fn::GetAtt": ["bastionHost", "PublicIp"]
			}
		},
		"bastionHostAccessSG": {
			"Description": "Security Group that can be used to permit SSH traffic from the Bastion Host",
			"Value": {
				"Ref": "bastionHostAccessSG"
			}
		},
		"ecsContainerInstanceSG": {
			"Description": "Security Group for ECS Container Instances",
			"Value": {
				"Ref": "ecsContainerInstanceSG"
			}
		}
	}
}

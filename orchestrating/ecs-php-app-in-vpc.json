{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {
		"Description": [
			"This template creates an ECS Cluster with an Elastic Load Balancer.  It then uses the ECR reference to ",
			"set up a Task Definition and a Service for the Docker image that has been provided.  Finally, it sets up ",
			"a Launch Configuration and an Auto Scaling Group to launch some Container Instances to host the ",
			"application.",
			"Note:  Container instances are created with encrypted volumes so data is protected at rest (Docker ",
			"creates LVM Volumes)",
			"Assumptions",
			"1.  That the ecs-vpc-with-public-and-private-subnets stack exists",
			"Questions/Issues",
			"1.  Consider creating multiple private subnets",
			"2.  Set up ELB for pass-through so SSL termination is at server"
		]
	},
	"Parameters": {
		"KeyName": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
		},
		"VPCId": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "The VPC where the Containers will run (e.g., vpc-79fb2a1d)"
		},
		"SubnetID": {
			"Type": "List<AWS::EC2::Subnet::Id>",
			"Description": "List of existing (private) subnet IDs to use for the load balancer and auto scaling group"
		},
		"DesiredCapacity": {
			"Type": "Number",
			"Default": "1",
			"Description": "Number of instances to launch in your ECS cluster"
		},
		"MaxSize": {
			"Type": "Number",
			"Default": "2",
			"Description": "Maximum number of instances that can be launched in your ECS cluster"
		},
		"InstanceType": {
			"Description": "The EC2 instance type to be used for ECS Container instances",
			"Type": "String",
			"Default": "m4.large",
			"AllowedValues": ["m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c4.large", "c4.xlarge",
				"c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
				"i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
				"hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 instance type."
		},
		"BastionIngressSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup::Id",
			"Description": "The Security Group that will permit inbound SSH traffic from the Bastion Host (e.g., sg-72277215)"
		},
		"ECSContainerInstanceSG": {
			"Type": "AWS::EC2::SecurityGroup::Id",
			"Description": "The Security Group that ECS Container Instances should be associated with (e.g., sg-4b27722c)"
		},
		"ECSContainerInstanceRoleName": {
			"Type": "String",
			"Default": "ecsInstanceRole",
			"Description": "The name of the role used to associate an Instance Profile for ECS Container instances (e.g., ecsInstanceRole)"
		},
		"ECSContainerServiceRoleName": {
			"Type": "String",
			"Default": "ecsServiceRole",
			"Description": "The name of the role used to associate an Instance Profile for ECS Container instances (e.g., ecsServiceRole)"
		},
		"AppImage": {
			"Type": "String",
			"Default": "aws-phi-demo:latest",
			"Description": "The Docker image/tag to be used for the application (e.g., aws-phi-demo:latest)"
		}
	},
	"Mappings": {
		"AWSRegionToAMI": {
			"us-east-1": {
				"AMIID": "ami-8f7687e2"
			},
			"us-west-2": {
				"AMIID": "ami-84b44de4"
			},
			"eu-west-1": {
				"AMIID": "ami-bb473cdb"
			},
			"ap-northeast-1": {
				"AMIID": "ami-095dbf68"
			},
			"ap-southeast-2": {
				"AMIID": "ami-697a540a"
			},
			"us-west-1": {
				"AMIID": "ami-bfe095df"
			},
			"ap-southeast-1": {
				"AMIID": "ami-cf03d2ac"
			},
			"eu-central-1": {
				"AMIID": "ami-b0cc23df"
			}
		}
	},
	"Resources": {
		"ECSCluster": {
			"Type": "AWS::ECS::Cluster"
		},
		"taskdefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"Properties": {
				"ContainerDefinitions": [{
					"Name": "ecs-phi-app",
					"Cpu": "10",
					"Essential": "true",
					"Image": {
						"Fn::Join": ["", [{
							"Ref": "AWS::AccountId"
						}, ".dkr.ecr.", {
							"Ref": "AWS::Region"
						}, ".amazonaws.com/", {
							"Ref": "AppImage"
						}]]
					},
					"Memory": "500",
					"MountPoints": [{
						"ContainerPath": "/usr/local/apache2/htdocs",
						"SourceVolume": "my-vol"
					}],
					"PortMappings": [{
						"HostPort": 80,
						"ContainerPort": 80
					}, {
						"HostPort": 443,
						"ContainerPort": 443
					}]
				}, {
					"Name": "busybox",
					"Cpu": 10,
					"Command": [
						"/bin/sh -c \"while true; do echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
					],
					"EntryPoint": ["sh", "-c"],
					"Essential": false,
					"Image": "busybox",
					"Memory": 200,
					"VolumesFrom": [{
						"SourceContainer": "ecs-phi-app"
					}]
				}],
				"Volumes": [{
					"Name": "my-vol"
				}]
			}
		},
		"ecsELBSG": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "ecs-elb-sg"
				}],
				"GroupDescription": "SG for ECS load balancers",
				"VpcId": {
					"Ref": "VPCId"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}],
				"SecurityGroupEgress": [{
					"IpProtocol": "tcp",
					"FromPort": "80",
					"ToPort": "80",
					"CidrIp": "0.0.0.0/0"
				}, {
					"IpProtocol": "tcp",
					"FromPort": "443",
					"ToPort": "443",
					"CidrIp": "0.0.0.0/0"
				}]
			}
		},
		"EcsElasticLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"Subnets": {
					"Ref": "SubnetID"
				},
				"Listeners": [{
					"LoadBalancerPort": "80",
					"InstancePort": "80",
					"Protocol": "HTTP"
				}],
				"Scheme": "internal",
				"SecurityGroups": [{
					"Ref": "ecsELBSG"
				}],
				"HealthCheck": {
					"Target": "HTTP:80/",
					"HealthyThreshold": "2",
					"UnhealthyThreshold": "10",
					"Interval": "30",
					"Timeout": "5"
				}
			}
		},
		"ContainerInstances": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"config": {
						"commands": {
							"01_add_instance_to_cluster": {
								"command": {
									"Fn::Join": ["", ["#!/bin/bash\n", "echo ECS_CLUSTER=", {
										"Ref": "ECSCluster"
									}, " >> /etc/ecs/ecs.config"]]
								}
							}
						},
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["", [
										"[main]\n",
										"stack=", {
											"Ref": "AWS::StackId"
										}, "\n",
										"region=", {
											"Ref": "AWS::Region"
										}, "\n"
									]]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["", [
										"[cfn-auto-reloader-hook]\n",
										"triggers=post.update\n",
										"path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
										"action=/opt/aws/bin/cfn-init -v ",
										"        --stack ", {
											"Ref": "AWS::StackName"
										},
										"        --resource ContainerInstances ",
										"        --region ", {
											"Ref": "AWS::Region"
										}, "\n",
										"runas=root\n"
									]]
								}
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": ["AWSRegionToAMI", {
						"Ref": "AWS::Region"
					}, "AMIID"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "ECSContainerInstanceRoleName"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"SecurityGroups": [{
					"Ref": "ECSContainerInstanceSG"
				}],
				"EbsOptimized": true,
				"PlacementTenancy": "dedicated",
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/xvdcz",
					"Ebs": {
						"VolumeSize": 22,
						"VolumeType": "gp2",
						"DeleteOnTermination": true,
						"Encrypted": true
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
							"#!/bin/bash -xe\n",
							"yum install -y aws-cfn-bootstrap\n",

							"/opt/aws/bin/cfn-init -v ",
							"        --stack ", {
								"Ref": "AWS::StackName"
							},
							"        --resource ContainerInstances ",
							"        --region ", {
								"Ref": "AWS::Region"
							}, "\n",
							"/opt/aws/bin/cfn-signal -e $? ",
							"        --stack ", {
								"Ref": "AWS::StackName"
							},
							"        --resource ECSAutoScalingGroup ",
							"        --region ", {
								"Ref": "AWS::Region"
							}, "\n"
						]]
					}
				}
			}
		},
		"ECSAutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"VPCZoneIdentifier": {
					"Ref": "SubnetID"
				},
				"LaunchConfigurationName": {
					"Ref": "ContainerInstances"
				},
				"MinSize": "1",
				"MaxSize": {
					"Ref": "MaxSize"
				},
				"DesiredCapacity": {
					"Ref": "DesiredCapacity"
				}
			},
			"CreationPolicy": {
				"ResourceSignal": {
					"Timeout": "PT15M"
				}
			},
			"UpdatePolicy": {
				"AutoScalingRollingUpdate": {
					"MinInstancesInService": "1",
					"MaxBatchSize": "1",
					"PauseTime": "PT15M",
					"WaitOnResourceSignals": "true"
				}
			}
		},
		"service": {
			"Type": "AWS::ECS::Service",
			"DependsOn": ["ECSAutoScalingGroup"],
			"Properties": {
				"Cluster": {
					"Ref": "ECSCluster"
				},
				"DesiredCount": "1",
				"LoadBalancers": [{
					"ContainerName": "ecs-phi-app",
					"ContainerPort": "80",
					"LoadBalancerName": {
						"Ref": "EcsElasticLoadBalancer"
					}
				}],
				"Role": {
					"Ref": "ECSContainerServiceRoleName"
				},
				"TaskDefinition": {
					"Ref": "taskdefinition"
				}
			}
		}
	},
	"Outputs": {
		"ecscluster": {
			"Description": "The new ECS Cluster",
			"Value": {
				"Ref": "ECSCluster"
			}
		},
		"taskdef": {
			"Description": "The new Task Definition",
			"Value": {
				"Ref": "taskdefinition"
			}
		},
		"ecsservice": {
			"Description": "The new ECS Service created on the Cluster",
			"Value": {
				"Ref": "service"
			}
		}
	}
}
